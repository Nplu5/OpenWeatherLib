# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - build-pipeline
  paths:
    include:
    - OpenWeather/*

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore NuGet packages for lib
  inputs:
    command: restore
    projects: 'OpenWeather/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Restore NuGet packages for tests
  inputs:
    command: restore
    projects: 'OpenWeather.Tests/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build library project
  inputs:
    command: build
    projects: 'OpenWeather/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Build test project
  inputs:
    command: build
    projects: 'OpenWeather.Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run test project
  inputs:
    command: test
    projects: 'OpenWeather.Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

- task: DotNetCoreCLI@2
  displayName: Package library 
  inputs:
    command: pack
    arguments: '--configuration $(buildConfiguration)'
    packagesToPack: 'OpenWeather/*.csproj'
    nobuild: true
    versioningSCheme: 'off'

- task: NuGetCommand@2
  displayName: 'nuget push'
  inputs:
    command: 'push'
    feedsToUse: 'select'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'OpenWeather.InternalFeed'
    versioningScheme: 'off'
    allowPackageConflicts: true