# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - build-pipeline
  paths:
    include:
    - azure-pipelines.yml
    - OpenWeather/*

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  testProject: 'OpenWeather.Tests/*.csproj'
  libraryProject: 'OpenWeather/*.csproj'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore NuGet packages for lib
  inputs:
    command: restore
    projects: '$(libraryProject)'

- task: DotNetCoreCLI@2
  displayName: Restore NuGet packages for tests
  inputs:
    command: restore
    projects: '$(testProject)'

- task: DotNetCoreCLI@2
  displayName: Build library project
  inputs:
    command: build
    projects: '$(libraryProject)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Build test project
  inputs:
    command: build
    projects: '$(testProject)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run test project
  inputs:
    command: test
    nobuild: true
    projects: '$(testProject)'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

#- task: NuGetCommand@2
#  inputs:
#    command: 'pack'
#    packagesToPack: '$(libraryProject)'
#    configuration: '$(buildConfiguration)'
#    versioningScheme: 'off'

- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet pakcage for library'
  inputs:
    command: pack
    arguments: '--configuration $(buildConfiguration)'
    packagesToPack: '$(libraryProject)'
    nobuild: true
    versioningScheme: 'off'
    outputDir: '$(Pipeline.Workspace)/Nuget'

- task: PublishPipelineArtifact@1
  displayName: 'Pugblish Artifacts to pipeline artifacts'
  inputs:
    targetPath: '$(Pipeline.Workspace)/Nuget'
    artifact: 'drop'

#- task: NuGetCommand@2
#  displayName: 'Pack NuGet package for library'
#  inputs:
#    command: 'pack'
#    packagesToPack: '$(libraryProject)'
#    packDestination: '$(build.artifactstagingdirectory)'

#- task: DotNetCoreCLI@2
#  displayName: Publish library as Zip
#  inputs:
#    command: publish
#    publishWebProjects: false
#    projects: '$(libraryProject)'
#    arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
#    zipAfterPublish: false

#- task: PublishBuildArtifacts@1
#  displayName: 'Publish Artifact to Pipeline drop'
#  inputs:
#    PathtoPublish: '$(build.artifactstagingdirectory)'
#    configuration: $(buildConfiguration)


#- task: NuGetCommand@2
#  displayName: 'Push Nuget to internal feed'
#  inputs:
#    command: 'push'
#    feedsToUse: 'select'
#    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#    nuGetFeedType: 'internal'
#    publishVstsFeed: 'OpenWeather.InternalFeed'
#    versioningScheme: 'off'
#    allowPackageConflicts: true